from logging import exception
from django.conf import settings
from django.shortcuts import redirect, render
from django.db.utils import IntegrityError
from App.models import User
from django.contrib.auth import logout as logout_user
from django.core.mail import send_mail
import random

# Render the "user" page,
# Parameters include error messages when user tries to change info
def render_user_change(Request,
                ChangeFailed=False,
                Inconsistency=False,
                UsedName=False) :
    Context          = {}
    Context["ChangeFailed"] = ChangeFailed
    Context["Inconsistency"] = Inconsistency
    Context["UsedName"] = UsedName
    return render(Request, 'user_change.html', Context)

def render_user_info(Request, Users) :
    Context          = {}
    Context["UserList"] = Users
    return render(Request, 'user.html', Context)

# Process a submitted change-user-info form
def process_change_form(Request, UserName, Email, Password, Password2, Introduction="Empty") :

    OldUserName = Request.user.username
    print('changing', OldUserName, 'to', UserName, Email, Password, Password2, Introduction)

    CurUser = User.objects.get(username=OldUserName)

    if Password and Password2 : # change password
        if Password != Password2 : # different password
            return {"change_failed": True, "inconsistent_password": True, "conflict_username": False}
        else :
            CurUser.set_password(Password)
    
    if UserName != OldUserName : # change user name
        CurUser.username=UserName

    if Introduction :
        CurUser.Introduction = Introduction
    
    if Email :
        CurUser.email = Email

    try:
        CurUser.save()
    except IntegrityError as e: # Possibly conflicting username
        return {"change_failed": True, "inconsistent_password": False, "conflict_username": True}

    CurUser.save()
    Request.user = CurUser
    
    return {"change_failed": False, "inconsistent_password": False, "conflict_username": False}

# Send a link to the user's email address to verify
def send_verification_email(CurUser: User):
    CurUser.VerificationCode = ''.join([random.choice('zyxwvutsrqponmlkjihgfedcba') for i in range(128)])
    CurUser.save()

    Msg = "Please access the link below to verify your account\n"
    Msg += settings.SITE_URL + "/user/" + CurUser.get_username() + "/verify/" + CurUser.VerificationCode + "/"

    send_mail(
        subject='Email Verification',
        message=Msg,
        from_email=settings.DEFAULT_FROM_EMAIL,
        recipient_list=[CurUser.get_email()],
        fail_silently=False
    )

# If the user clicks the verification link, verify
def process_verification(Request, UserName, Code) :

    try :
        CurUser = User.objects.get(username=UserName)
    except :
        print("User not found in process_verification")
        return {"verification_failed": True, "reason": "User not found!"}
    
    if CurUser.VerificationCode == Code :   # VerificationCode is pre-generated by send_verification_email()
        CurUser.EmailVerified = True
        CurUser.save()
        return {"verification_failed": False, "reason": "Congratulations!"}
    else :
        return {"verification_failed": True, "reason": "Verification code incorrect!"}

# A decorator, redirects to index if email not verified
def verification_required(func) :

    def decorated(*args, **kwargs):

        User = args[0].user
        if User.EmailVerified :
            return func(*args, **kwargs)
        else :
            return redirect('/')
    
    return decorated